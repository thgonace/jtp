{"version":3,"sources":["Stashes.js","Trade.js","App.js","serviceWorker.js","index.js"],"names":["httpHandler","require","Component","Trade","state","searches","search","text","img","response","intervalid","auto","lastsearch","timesincelast","forEach","s","amount","currency","setInterval","Math","floor","Date","getTime","setState","this","getAll","get","then","res","clearInterval","result","id","searchterm","price","i","length","listing","getAllSearch","className","map","onClick","src","alt","type","key","onChange","style","item","name","typeLine","icon","properties","prop","values","implicitMods","mod","explicitMods","craftedMods","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e3a50b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst httpHandler = require('react-http-client');\r\nclass Stashes extends Component{\r\n    constructor() {\r\n        super()\r\n    \r\n        this.state = { stashes: [], stashnum: 0 }\r\n    \r\n      }\r\n      getStashes(){\r\n        let response = {}\r\n        httpHandler.get(\r\n          'http://localhost?id='+this.state.next\r\n        ).then(res => {\r\n          response = res\r\n          console.log(response)\r\n          let stashes = []\r\n          for (let i = 0; i < response.stashes.length; i++) {\r\n            let stash = response.stashes[i]\r\n            if (stash.accountName !== null) {          \r\n              stashes.push(stash)\r\n            }\r\n          }\r\n          this.setState({ stashes, next :response.next_change_id })\r\n    \r\n        })\r\n    \r\n      }\r\n      componentDidMount() {\r\n        let response = {}\r\n        httpHandler.get(\r\n          'http://localhost'\r\n        ).then(res => {\r\n          response = res\r\n          console.log(response)\r\n          let stashes = []\r\n          for (let i = 0; i < response.stashes.length; i++) {\r\n            let stash = response.stashes[i]\r\n            if (stash.accountName !== null) {          \r\n              stashes.push(stash)\r\n            }\r\n          }\r\n          this.setState({ stashes, next :response.next_change_id })\r\n    \r\n        })\r\n    \r\n      }\r\n      nextstash() {\r\n        this.setState({ stashnum: this.state.stashnum + 1 })\r\n      }\r\n      render() {\r\n        let stash = this.state.stashes[this.state.stashnum]\r\n        let stash_html = <div></div>\r\n        if (stash !== undefined) {\r\n          stash_html =\r\n            <div>\r\n              <div>{stash.accountName}</div>\r\n              <div>{stash.league}</div>\r\n    \r\n              {stash.items.map(item => (\r\n                <div style={{ \"float\": \"left\", \"height\": \"500px\", \"width\": \"25%\" }}>\r\n                  { item.name + \" \" + item.typeLine}\r\n                  <div><img src={item.icon} alt=\"\" /></div>\r\n                  {item.properties ? item.properties.map(prop => (\r\n                    <div>{prop.name}   {prop.values.length > 0 ? prop.values[0][0] : ''}</div>\r\n                  )) : <div></div>}\r\n                  {item.implicitMods ?\r\n                    item.implicitMods.map(mod => (\r\n                      <div>{mod}</div>\r\n                    )) : <div></div>}\r\n                  {item.explicitMods ?\r\n                    item.explicitMods.map(mod => (\r\n                      <div>{mod}</div>\r\n                    )) : <div></div>}\r\n                  {item.craftedMods ?\r\n                    item.craftedMods.map(mod => (\r\n                      <div>{mod}</div>\r\n                    )) : <div></div>}\r\n    \r\n                  <div>{item.note}</div>\r\n                </div>\r\n              ))\r\n              }</div>\r\n        }\r\n        return (\r\n          <div className=\"App\" key=\"app\">\r\n            <button onClick={() => this.nextstash()}>Next Stash</button>\r\n            <button onClick={() => this.getStashes()}>Next Result set</button>\r\n            <div>\r\n              {stash_html}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n}\r\nexport default Stashes;","import React, { Component } from 'react';\r\nimport './trade.css';\r\nconst httpHandler = require('react-http-client');\r\nclass Trade extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            searches: [\r\n                { search: 'maps', text: 'tier 14+ map',img: 'https://web.poecdn.com/gen/image/WzI4LDE0LHsiZiI6IjJESXRlbXNcL01hcHNcL0F0bGFzMk1hcHNcL05ld1wvVG93ZXIiLCJ3IjoxLCJoIjoxLCJzY2FsZSI6dHJ1ZSwibW4iOjksIm10IjoxNH1d/500eef5471/Item.png' },\r\n                { search: 'tabula', text: 'Tabula Rasa',img: 'https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/TabulaRasa.png?v=c169e1ab88583925693bb3a35cc49b6b&w=2&h=3&scale=1' },\r\n                { search: 'exalted', text: 'Exalted Orb' ,img: 'https://web.poecdn.com/image/Art/2DItems/Currency/CurrencyAddModToRare.png?v=1745ebafbd533b6f91bccf588ab5efc5&w=1&h=1&scale=1' },\r\n                { search: 'divine', text: 'Divine Orb',img: 'https://web.poecdn.com/image/Art/2DItems/Currency/CurrencyModValues.png?v=0ad99d4a2b0356a60fa8194910d80f6b&w=1&h=1&scale=1'},\r\n                { search: 'spectrechest', text: '+1 Spectre Chest' ,img:'https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/BodyInt2B.png?v=4b5543d6b4ed658ed53ba55837ff752a&w=2&h=3&scale=1'},\r\n                { search: '6Lspectrechest', text: '6-Link +1 Spectre Chest',img: 'https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/BodyInt2B.png?v=4b5543d6b4ed658ed53ba55837ff752a&w=2&h=3&scale=1'},\r\n                { search: '6LBspectrechest', text: '6-Blue-Link +1 Spectre Chest' ,img:'https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/BodyInt2B.png?v=4b5543d6b4ed658ed53ba55837ff752a&w=2&h=3&scale=1'},\r\n                { search: '6L3B3Wspectrechest', text: '6-Link 3-Blue 3-White +1 Spectre Chest',img:'https://web.poecdn.com/image/Art/2DItems/Armours/BodyArmours/BodyInt2B.png?v=4b5543d6b4ed658ed53ba55837ff752a&w=2&h=3&scale=1' },\r\n                { search: '3MLbonehelmet', text: '+3 level to minion gems Bone helmet',img:'https://web.poecdn.com/image/Art/2DItems/Armours/Helmets/BoneHelm.png?v=998a0d0beda1648f6a95cb26b166aa6c&w=2&h=2&scale=1' },\r\n                { search: 'elderbonehelmet', text: 'Elder influenced Bone helmet',img:'https://web.poecdn.com/image/Art/2DItems/Armours/Helmets/BoneHelm.png?v=998a0d0beda1648f6a95cb26b166aa6c&w=2&h=2&scale=1' },\r\n                { search: 'mininondamagebonehelmet', text: '20%+ increased minion damage explicit Bone helmet' ,img:'https://web.poecdn.com/image/Art/2DItems/Armours/Helmets/BoneHelm.png?v=998a0d0beda1648f6a95cb26b166aa6c&w=2&h=2&scale=1' }\r\n\r\n\r\n            ],\r\n            response: [], intervalid: null, auto: false, search: \"\", lastsearch: 0, timesincelast: \"\"\r\n        }\r\n        this.state.searches.forEach(s => {\r\n            this.state[s.search] = { amount: 0, currency: \"\" }\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            if (this.state.lastsearch !== 0) {\r\n                let timesincelast = \"time since last search in seconds \" + Math.floor((new Date().getTime() - this.state.lastsearch) / 1000)\r\n                this.setState({ timesincelast })\r\n            }\r\n        }, 1000)\r\n        this.getAll();\r\n        setInterval(() => {\r\n            this.getAll();\r\n        }, 999999999)\r\n    }\r\n    get(search) {\r\n        let response = {}\r\n        httpHandler.get(\r\n            'https://jtp-bootcamp-server.herokuapp.com/trade?search=' + search\r\n        ).then(res => {\r\n            response = res\r\n            if (this.state.auto === true && this.state.intervalid !== null) {\r\n                clearInterval(this.state.intervalid)\r\n            }\r\n            this.setState({ response: response.result, search, lastsearch: new Date().getTime() }, () => {\r\n                if (this.state.auto === true) {\r\n                    let id = setInterval(() => {\r\n                        this.get(this.state.search)\r\n                    }, 3000)\r\n                    this.setState({ intervalid: id, auto: true })\r\n                }\r\n            })\r\n        })\r\n    }\r\n    getAllSearch(searchterm) {\r\n        httpHandler.get(\r\n            'https://jtp-bootcamp-server.herokuapp.com/trade?search=' + searchterm\r\n        ).then(res => {\r\n            let response = res\r\n            let price = 0\r\n            for (let i = 0; i < response.result.length; i++) {\r\n                if (response.result[i].listing.price.currency === \"chaos\") {\r\n                    price = response.result[i].listing.price\r\n                    break;\r\n                }\r\n            }\r\n            if (price === 0) {\r\n                price = response.result[0].listing.price\r\n            }\r\n            let s = {}\r\n            s[searchterm] = price\r\n            this.setState(s)\r\n        })\r\n    }\r\n    getAll() {\r\n        this.state.searches.forEach(s => {\r\n            this.getAllSearch(s.search)\r\n        })\r\n    }\r\n    auto() {\r\n        if (this.state.auto === false) {\r\n            let id = setInterval(() => {\r\n                this.get(this.state.search)\r\n            }, 3000)\r\n            this.setState({ intervalid: id, auto: true })\r\n        } else if (this.state.intervalid !== null) {\r\n            clearInterval(this.state.intervalid)\r\n            this.setState({ auto: false, intervalid: null })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className=\"columns\">\r\n                        {this.state.searches.map(search => (\r\n                            <div>\r\n                                <button className=\"Buttons\" onClick={() => this.get(search.search)}>\r\n                                    <img src={search.img} alt='' />\r\n                                </button>\r\n                                <div>Cheapest {search.text}: {this.state[search.search].amount + \" \" + this.state[search.search].currency}</div>\r\n\r\n                            </div>\r\n                        ))}\r\n                        <input type=\"checkbox\" key=\"auto\" onChange={() => this.auto()}></input>\r\n                        <div> {this.state.timesincelast}</div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.state.response.map(res => (\r\n                        <div style={{ \"float\": \"left\", \"height\": \"500px\", \"width\": \"25%\" }}>\r\n                            { res.item.name + \" \" + res.item.typeLine}\r\n                            <div><img src={res.item.icon} alt=\"\" /></div>\r\n                            {res.item.properties ? res.item.properties.map(prop => (\r\n                                <div>{prop.name}   {prop.values.length > 0 ? prop.values[0][0] : ''}</div>\r\n                            )) : <div></div>}\r\n                            {res.item.implicitMods ?\r\n                                res.item.implicitMods.map(mod => (\r\n                                    <div>{mod}</div>\r\n                                )) : <div></div>}\r\n                            {res.item.explicitMods ?\r\n                                res.item.explicitMods.map(mod => (\r\n                                    <div>{mod}</div>\r\n                                )) : <div></div>}\r\n                            {res.item.craftedMods ?\r\n                                res.item.craftedMods.map(mod => (\r\n                                    <div>{mod}</div>\r\n                                )) : <div></div>}\r\n\r\n                            <div>{res.listing.price.amount + \" \" + res.listing.price.currency}</div>\r\n                        </div>\r\n                    ))\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default Trade;","import React, { Component } from 'react';\nimport './App.css';\nimport Stashes from './Stashes';\nimport Trade from './Trade';\nclass App extends Component { \n  render(){\n    return(\n      <Trade></Trade>\n      // <Stashes></Stashes>\n    )\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}